---
import Layout from "@/layouts/Layout.astro";

import BackToHomeLink from "@/components/BackToHomeLink.astro";
import BrowserSupport from "@/components/BrowserSupport.astro";
import MdnDoc from "@/components/MdnDoc.astro";
import PageHeader from "@/components/PageHeader.astro";
import PageSection from "@/components/PageSection.astro";
import PageSubHeader from "@/components/PageSubHeader.astro";
import IconX from "@/icons/IconX.astro";

const title = "<dialog>";
---

<Layout title={title}>
  <PageHeader title={title} />
  <PageSection>
    <MdnDoc path="Web/HTML/Element/dialog" text={title}>
      the <code>&lt;dialog&gt;</code> html element represents a dialog box or
      other interactive component, such as a dismissible alert, inspector, or
      subwindow.
    </MdnDoc>
  </PageSection>
  <PageSection>
    <PageSubHeader title="1" subTitle="e.g. simple alert" />
    <button class="example1-button example-button">press me</button>
    <dialog class="example1" aria-labelledby="example1-title">
      <form method="dialog">
        <div class="dialog-header">
          <h3 id="example1-title">simple alert</h3>
          <button type="submit" class="close" aria-label="close"
            ><IconX class="close-icon" />
          </button>
        </div>
        <div class="dialog-body">
          <p>press the [x] button or the <code>esc</code> key to close it.</p>
        </div>
      </form>
    </dialog>
  </PageSection>
  <PageSection>
    <PageSubHeader title="2" subTitle="e.g. confirm" />
    <button class="example2-button example-button">press me</button>
    <dialog class="example2" aria-labelledby="example2-title">
      <form method="dialog">
        <div class="dialog-header">
          <h3 id="example2-title">confirm</h3>
        </div>
        <div class="dialog-body">
          <p>you can also close it by pressing the <code>esc</code> key.</p>
        </div>
        <footer class="dialog-footer">
          <button type="submit" value="it was canceled.">cancel</button>
          <button type="submit" value="it was ok.">ok</button>
        </footer>
      </form>
    </dialog>
    <p class="dialog-action-result"></p>
  </PageSection>
  <PageSection>
    <BrowserSupport
      items={[
        {
          value: title,
          chrome: "37",
          firefox: "98",
          safari: "15.4",
        },
        {
          value: "::backdrop",
          chrome: "37",
          firefox: "47",
          safari: "15.4",
        },
        {
          value: "backdrop-filter",
          chrome: "76",
          firefox: "103",
          safari: "9",
        },
        {
          value: "scrollbar-gutter",
          chrome: "94",
          firefox: "97",
          safari: "No",
        },
      ]}
    />
  </PageSection>
  <BackToHomeLink />
</Layout>

<script>
  const example1 = document.querySelector<HTMLDialogElement>(".example1");
  if (!example1) throw Error("example1 element does not exists.");

  const example1Button =
    document.querySelector<HTMLButtonElement>(".example1-button");
  if (!example1Button) throw Error("example1Button element does not exists.");

  const example2 = document.querySelector<HTMLDialogElement>(".example2");
  if (!example2) throw Error("example2 element does not exists.");

  const example2Button =
    document.querySelector<HTMLButtonElement>(".example2-button");
  if (!example2Button) throw Error("example2Button element does not exists.");

  example1Button.addEventListener("click", () => {
    example1.showModal();
  });

  example1.addEventListener("click", (event) => {
    if (["A", "DIALOG"].includes((event.target as HTMLElement).nodeName)) {
      example1.close();
    }
  });

  example2Button.addEventListener("click", () => {
    example2.showModal();
  });

  example2.addEventListener("click", (event) => {
    if (["A", "DIALOG"].includes((event.target as HTMLElement).nodeName)) {
      example2.close();
    }
  });

  example2.addEventListener("close", () => {
    const actionResult = document.querySelector<HTMLElement>(
      ".dialog-action-result",
    );
    if (!actionResult) throw Error("actionResult element does not exists.");
    actionResult.textContent = example2.returnValue;
  });
</script>

<style>
  .example-button {
    background: rgb(var(--gray-700));
    box-shadow: 0.05rem 0.1rem 0.1rem rgb(var(--gray-900));
    color: rgb(var(--gray-100));
  }

  .dialog-header {
    align-items: center;
    border-bottom: 1px solid rgb(var(--gray-600));
    color: rgb(var(--gray-100));
    display: flex;
    font-size: 1.5rem;
    font-weight: bold;
    justify-content: space-between;
  }

  .dialog-header > button {
    background: rgb(var(--gray-500));
  }

  .dialog-body {
    margin-top: 1rem;
  }

  .dialog-footer {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
    margin-top: 1rem;
  }

  .dialog-footer > button {
    background: rgb(var(--gray-600));
    box-shadow: 0.05rem 0.1rem 0.1rem rgb(var(--gray-800));
    color: rgb(var(--gray-100));
  }

  .dialog-action-result {
    color: rgb(var(--pink-300));
    font-weight: bold;
    margin: 0.5rem 0;
  }

  .dialog-action-result::before {
    color: rgb(var(--gray-400));
    content: "Â» ";
    margin-left: 0.25rem;
  }

  .close {
    color: rgb(var(--gray-400));
  }

  .close:active {
    color: rgb(var(--gray-100));
  }

  .close-icon {
    height: 1.5rem;
    vertical-align: -0.175em;
    width: 1.5rem;
  }
</style>
