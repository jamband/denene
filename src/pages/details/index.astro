---
import "@/styles/app.css";

import { BackToHomeLink } from "@/components/back-to-home-link";
import { BrowserSupport } from "@/components/browser-support";
import { Code } from "@/components/code";
import { MdnDoc } from "@/components/mdn-doc";
import { PageHeader } from "@/components/page/header";
import { PageSection } from "@/components/page/section";
import { PageSubHeader } from "@/components/page/sub-header";
import { IconChevronDown } from "@/icons/chevron-down";
import { IconDotsHorizontal } from "@/icons/dots-horizontal";
import { IconExternalLink } from "@/icons/external-link";
import { IconX } from "@/icons/x";
import { Layout } from "@/layouts/layout";
import styles from "./_styles.module.css";

const title = "<details>";
---

<Layout title={title}>
  <PageHeader title={title} />
  <PageSection>
    <MdnDoc path="Web/HTML/Element/details" text={title}>
      the <Code code={title} inline /> html element creates a disclosure widget in
      which information is visible only when the widget is toggled into an "open"
      state. a summary or label must be provided using the
      <Code code="<summary>" inline /> element.
    </MdnDoc>
  </PageSection>
  <PageSection>
    <PageSubHeader title="what tools do you use to build this site?" />
    <div class={styles.toolsContainer}>
      <details class={styles.tools}>
        <summary class={styles.toolsSummary}
          >hosting<IconX class={styles.toolsSummaryIcon} /></summary
        >
        <p class={styles.toolsMain}>
          <span class={styles.toolsTool}>github pages</span> » you can use github
          pages to host a website about yourself, your organization, or your project
          directly from a repository on github.com.
        </p>
      </details>
      <details class={styles.tools}>
        <summary class={styles.toolsSummary}
          >building<IconX class={styles.toolsSummaryIcon} /></summary
        >
        <p class={styles.toolsMain}>
          <span class={styles.toolsTool}>astro</span> » build faster websites with
          astro's next-gen island architecture.
        </p>
      </details>
      <details class={styles.tools}>
        <summary class={styles.toolsSummary}
          >styling<IconX class={styles.toolsSummaryIcon} /></summary
        >
        <p class={styles.toolsMain}>
          <span class={styles.toolsTool}>css modules</span> » a css module is a css
          file in which all class names and animation names are scoped locally by
          default.
        </p>
      </details>
      <details class={styles.tools}>
        <summary class={styles.toolsSummary}
          >color palette<IconX class={styles.toolsSummaryIcon} /></summary
        >
        <p class={styles.toolsMain}>
          <span class={styles.toolsTool}>tailwind css</span> » tailwind includes
          an expertly-crafted default color palette out-of-the-box that is a great
          starting point if you don't have your own specific branding in mind.
        </p>
      </details>
    </div>
  </PageSection>
  <PageSection>
    <PageSubHeader title="dropdown" />
    <p>
      it can also create something like dropdown as an alternative to
      <Code code="<select>" inline />. considering accessibility and semantics,
      it would be better if there was something like
      <Code code="<dropdown>" inline />.
    </p>
    <div class={styles.dropdowns}>
      <details id="dropdown1" class={styles.dropdown}>
        <summary class={styles.dropdownButton}
          >press me<IconChevronDown
            class={styles.dropdownButtonIcon}
          /></summary
        >
        <div class={styles.dropdownContent}>
          <a href="/denene/" class={styles.dropdownLink}>home</a>
          <a href="/denene/about/" class={styles.dropdownLink}>about</a>
          <a href="/denene/contact/" class={styles.dropdownLink}>contact</a>
          <hr class={styles.dropdownDivider} />
          <a
            href="https://github.com/jamband/denene"
            class={styles.dropdownLink}
            rel="noreferrer"
            target="_blank"
            >github<IconExternalLink class={styles.dropdownLinkIcon} /></a
          >
        </div>
      </details>
      <details id="dropdown2" class={styles.dropdown}>
        <summary class={styles.dropdownButton}
          ><IconDotsHorizontal class={styles.dropdownButtonIcon} /></summary
        >
        <div class={styles.dropdownContent}>
          <a href="/denene/" class={styles.dropdownLink}>home</a>
          <a href="/denene/about/" class={styles.dropdownLink}>about</a>
          <a href="/denene/contact/" class={styles.dropdownLink}>contact</a>
          <hr class={styles.dropdownDivider} />
          <a
            href="https://github.com/jamband/denene"
            class={styles.dropdownLink}
            rel="noreferrer"
            target="_blank"
            >github<IconExternalLink class={styles.dropdownLinkIcon} /></a
          >
        </div>
      </details>
    </div>
  </PageSection>
  <PageSection>
    <BrowserSupport
      items={[
        {
          value: title,
          chrome: "12",
          firefox: "49",
          safari: "6",
        },
        {
          value: "<summary>",
          chrome: "12",
          firefox: "49",
          safari: "6",
        },
      ]}
    />
  </PageSection>
  <BackToHomeLink />
  <script>
    const closeDropdownOnEscapeKeyDown = (
      element: HTMLElement,
      event: KeyboardEvent,
    ) => {
      if (event.key === "Escape") {
        element.removeAttribute("open");
      }
    };

    const closeDropdownOnFocusOut = (
      element: HTMLElement,
      event: FocusEvent,
    ) => {
      if (!element.contains(event.relatedTarget as HTMLElement)) {
        setTimeout(() => {
          element.removeAttribute("open");
        }, 100);
      }
    };

    let selector = "";

    // dropdown1
    selector = "#dropdown1";
    const dropdown1 = document.querySelector<HTMLDetailsElement>(selector);
    if (!dropdown1) throw new Error(`${selector} does not exists.`);

    dropdown1.addEventListener("keydown", (event) => {
      closeDropdownOnEscapeKeyDown(dropdown1, event);
    });

    dropdown1.addEventListener("focusout", (event) => {
      closeDropdownOnFocusOut(dropdown1, event);
    });

    // dropdown2
    selector = "#dropdown2";
    const dropdown2 = document.querySelector<HTMLDetailsElement>(selector);
    if (!dropdown2) throw new Error(`${selector} does not exists.`);

    dropdown2.addEventListener("keydown", (event) => {
      closeDropdownOnEscapeKeyDown(dropdown2, event);
    });

    dropdown2.addEventListener("focusout", (event) => {
      closeDropdownOnFocusOut(dropdown2, event);
    });
  </script>
</Layout>
